{"version":3,"sources":["actions/add_form.js","components/UserForm.jsx","reducers/form.js","store.js","App.js","serviceWorker.js","index.js"],"names":["add_colonist_number","value","type","payload","add_last_name","add_faction","submit_form","UserForm","event","fieldName","dispatch","useDispatch","React","useState","colonist_number","first_name","last_name","faction","submitted","values","setValues","class","Form","Group","controlId","Label","Control","handler","target","console","log","onChange","e","Button","onClick","variant","initialState","reducers","combineReducers","mainReducer","state","action","firstName","lastName","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middleware","thunk","promise","store","createStore","applyMiddleware","App","className","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.43a7d40e.chunk.js","sourcesContent":["export const ADD_COLONIST_NUMBER = \"ADD_COLONIST_NUMBER\";\r\nexport const ADD_FIRST_NAME = \"ADD_FIRST_NAME\";\r\nexport const ADD_LAST_NAME = \"ADD_LAST_NAME\";\r\nexport const ADD_FACTION = \"ADD_FACTION\";\r\nexport const SUBMIT_FORM = \"SUBMIT_FORM\";\r\n\r\nexport const add_colonist_number = value => ({\r\n  type: ADD_COLONIST_NUMBER,\r\n  payload: value\r\n});\r\n\r\nexport const add_first_name = value => ({\r\n  type: ADD_FIRST_NAME,\r\n  payload: value\r\n});\r\n\r\nexport const add_last_name = value => ({\r\n  type: ADD_LAST_NAME,\r\n  payload: value\r\n});\r\n\r\nexport const add_faction = value => ({\r\n  type: ADD_FACTION,\r\n  payload: value\r\n});\r\n\r\nexport const submit_form = value => ({\r\n  type: SUBMIT_FORM,\r\n  payload: value\r\n});\r\n","import React from \"react\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  add_colonist_number,\r\n  add_faction,\r\n  add_first_name,\r\n  add_last_name,\r\n  submit_form\r\n} from \"../actions/add_form\";\r\n\r\nfunction UserForm({ event }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const [values, setValues] = React.useState({\r\n    colonist_number: \"\",\r\n    first_name: \"\",\r\n    last_name: \"\",\r\n    faction: \"\",\r\n    submitted: \"\"\r\n  });\r\n\r\n  const handleInputFieldChange = fieldName => event => {\r\n    setValues({ ...values, [fieldName]: event.target.value });\r\n    const payload = { ...values, [fieldName]: event.target.value };\r\n    console.log(\"THIS IS CALLED!!\");\r\n    // debounce(props.dispatch(...))\r\n    dispatch(add_colonist_number(payload));\r\n  };\r\n\r\n  return (\r\n    <div class=\"container\">\r\n      <Form>\r\n        <Form.Group controlId=\"exampleForm.ControlInput1\">\r\n          <Form.Label>Colonist number</Form.Label>\r\n          <Form.Control handler={handleInputFieldChange(\"colonist_number\")} />\r\n          <Form.Label>First Name</Form.Label>\r\n          <Form.Control onChange={e => e.target.value} />\r\n          <Form.Label>Last Name</Form.Label>\r\n          <Form.Control\r\n            onChange={dispatch(add_last_name(e => e.target.value))}\r\n          />\r\n          <Form.Label>Faction</Form.Label>\r\n          <Form.Control\r\n            onChange={() => dispatch(add_faction(e => e.target.value))}\r\n          />\r\n        </Form.Group>\r\n        <Button onClick={() => dispatch(submit_form())} variant=\"success\">\r\n          Get my ration\r\n        </Button>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserForm;\r\n","import * as types from \"../actions/add_form\";\r\n\r\nconst initialState = {\r\n  colonist_number: \"\",\r\n  first_name: \"\",\r\n  last_name: \"\",\r\n  faction: \"\",\r\n  submitted: \"\"\r\n};\r\n\r\nexport const mainReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.ADD_COLONIST_NUMBER:\r\n      console.log(\"Payload is\" + action.payload);\r\n      return { ...state, colonist_number: action.payload };\r\n    case types.ADD_FIRST_NAME:\r\n      return { ...state, firstName: action.payload };\r\n    case types.ADD_LAST_NAME:\r\n      return { ...state, lastName: action.payload };\r\n    case types.ADD_FACTION:\r\n      return { ...state, faction: action.payload };\r\n    case types.SUBMIT_FORM:\r\n      console.log(\"The form has been submitted! Look at the Redux store!\");\r\n      return { ...state, submitted: \"TG20{always_disable_redux_dev_tools}\" };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers, createStore, applyMiddleware, compose } from \"redux\";\r\nimport promise from \"redux-promise\";\r\nimport thunk from \"redux-thunk\";\r\nimport { mainReducer } from \"./reducers/form\";\r\n\r\nconst reducers = combineReducers({\r\n  mainReducer\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst middleware = [thunk, promise];\r\n\r\nconst store = createStore(\r\n  reducers,\r\n  composeEnhancers(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport UserForm from \"./components/UserForm\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <h1>Planet personal user</h1>\n        <b>Get your weekly plant rations by creating a Gaia user!</b>\n        <UserForm />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}